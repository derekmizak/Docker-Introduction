services:
  node:
    build: ./app  # ✅ Build using a Dockerfile in the ./app directory
    container_name: node-app
    working_dir: /app
    volumes:
      - ./app:/app  # ✅ Sync application source code
      - /app/node_modules  # ✅ Anonymous volume for node_modules
    ports:
      - "3000:3000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy  # ✅ 2025: Wait for DB to be healthy
        restart: true
    restart: unless-stopped  # ✅ 2025: Better than 'always' for production
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  db:
    image: postgres:16-alpine  # ✅ 2025: Specific version + alpine for security
    container_name: postgres-db
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data  # ✅ Persistent data storage
      - ./postgres-init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres-data:  # ✅ Persistent PostgreSQL data
